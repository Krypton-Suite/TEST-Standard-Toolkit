# New BSD 3-Clause License (https://github.com/Krypton-Suite/Standard-Toolkit/blob/master/LICENSE)
# Modifications by Peter Wagner (aka Wagnerp), Simon Coghlan (aka Smurf-IV), Giduac, tobitege et al. 2025 - 2025. All rights reserved.

name: Nightly Release

on:
  schedule:
    # Run nightly build automatically at midnight UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  nightly:
    runs-on: windows-latest
    environment: production  # Requires approval before publishing

    concurrency:
      group: nightly-alpha
      cancel-in-progress: true

    steps:
      - name: Security - Verify Repository
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if ($env:GITHUB_REPOSITORY -ne 'Krypton-Suite/TEST-Standard-Toolkit') {
            Write-Error "Security: Invalid repository '$env:GITHUB_REPOSITORY'. This workflow should only run on Krypton-Suite/TEST-Standard-Toolkit"
            exit 1
          }
          Write-Host "âœ“ Repository verified: $env:GITHUB_REPOSITORY"

      - name: Security - Verify Branch
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          # This workflow checks out alpha, so verify we're authorized to do so
          $allowedRefs = @('refs/heads/alpha', 'refs/heads/master', 'refs/heads/main')
          if ($env:GITHUB_REF -notin $allowedRefs) {
            Write-Error "Security: Workflow triggered from unauthorized branch '$env:GITHUB_REF'"
            exit 1
          }
          Write-Host "âœ“ Branch verified: $env:GITHUB_REF"

      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: alpha
          fetch-depth: 0

      - name: Check for changes in last 24 hours
        id: check_changes
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Get commits from last 24 hours on alpha branch
          $yesterday = (Get-Date).AddDays(-1).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss")
          $commitCount = git rev-list --count --since="$yesterday" alpha
          
          Write-Host "Commits in last 24 hours: $commitCount"
          
          if ([int]$commitCount -gt 0) {
            Write-Host "Changes detected - proceeding with nightly build"
            echo "has_changes=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "No changes detected - skipping nightly build"
            echo "has_changes=false" >> $env:GITHUB_OUTPUT
          }

      - name: Skip notification
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          Write-Host "::notice::No commits in the last 24 hours. Skipping nightly build and publish."

      # .NET 9 (GA)
      - name: Setup .NET 9
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 9.0.x

      # .NET 10 (GA)
      - name: Setup .NET 10
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 10.0.x
        continue-on-error: true

      # .NET 11 (will auto-upgrade from preview to GA when available)
      - name: Setup .NET 11
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 11.0.x
        continue-on-error: true

      # global.json dynamically generate (use latest SDK available)
      - name: Force .NET 10 SDK via global.json
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          $sdkVersion = (dotnet --list-sdks | Select-String "10.0").ToString().Split(" ")[0]
          if (-not $sdkVersion) {
            # Fallback to .NET 8 if .NET 10 is not available
            $sdkVersion = (dotnet --list-sdks | Select-String "8.0").ToString().Split(" ")[0]
          }
          Write-Output "Using SDK $sdkVersion"
          @"
          {
            "sdk": {
              "version": "$sdkVersion",
              "rollForward": "latestFeature"
            }
          }
          "@ | Out-File -Encoding utf8 global.json

      - name: Setup MSBuild
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Setup NuGet
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: NuGet/setup-nuget@v2

      - name: Cache NuGet
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        if: steps.check_changes.outputs.has_changes == 'true'
        run: dotnet restore "Source/Krypton Components/Krypton Toolkit Suite 2022 - VS2022.sln"

      - name: Build Nightly
        if: steps.check_changes.outputs.has_changes == 'true'
        run: msbuild "Scripts/nightly.proj" /t:Build /p:Configuration=Nightly /p:Platform="Any CPU"

      - name: Pack Nightly
        if: steps.check_changes.outputs.has_changes == 'true'
        run: msbuild "Scripts/nightly.proj" /t:Pack /p:Configuration=Nightly /p:Platform="Any CPU"

      - name: Push NuGet Packages to nuget.org
        if: steps.check_changes.outputs.has_changes == 'true'
        id: push_nuget
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not $env:NUGET_API_KEY) {
            Write-Warning "NUGET_API_KEY not set - skipping NuGet push"
            echo "packages_published=false" >> $env:GITHUB_OUTPUT
            exit 0
          }
          
          $packages = Get-ChildItem "Bin/Packages/Nightly/*.nupkg" -ErrorAction SilentlyContinue
          $publishedAny = $false
          
          if ($packages) {
            foreach ($package in $packages) {
              Write-Output "Pushing package: $($package.Name)"
              try {
                $output = dotnet nuget push "$($package.FullName)" --api-key $env:NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate 2>&1 | Out-String
                Write-Output $output
                # Check if package was actually pushed (not skipped)
                if ($output -notmatch "already exists" -and $output -notmatch "was not pushed") {
                  $publishedAny = $true
                  Write-Host "Package $($package.Name) was published"
                } else {
                  Write-Host "Package $($package.Name) already exists - skipped"
                }
              } catch {
                Write-Warning "Failed to push $($package.Name): $_"
              }
            }
          } else {
            Write-Output "No NuGet packages found to push"
          }
          
          echo "packages_published=$publishedAny" >> $env:GITHUB_OUTPUT
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Get Version
        if: steps.check_changes.outputs.has_changes == 'true'
        id: get_version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = $null
          
          # Try to get version from the built assembly (most reliable)
          try {
            $dllPath = Get-ChildItem "Bin/Nightly/net48/Krypton.Toolkit.dll" -ErrorAction Stop
            $assemblyVersion = [System.Reflection.AssemblyName]::GetAssemblyName($dllPath.FullName).Version
            $version = $assemblyVersion.ToString()
            Write-Host "Got version from assembly: $version"
          } catch {
            Write-Host "Could not read version from assembly: $_"
          }
          
          # Fallback: Try to read from csproj XML
          if (-not $version) {
            try {
              $proj = 'Source/Krypton Components/Krypton.Toolkit/Krypton.Toolkit 2022.csproj'
              [xml]$projXml = Get-Content $proj
              $versionNode = $projXml.SelectSingleNode("//Version")
              if ($versionNode) {
                $version = $versionNode.InnerText.Trim()
                Write-Host "Got version from csproj: $version"
              }
            } catch {
              Write-Host "Could not read version from csproj: $_"
            }
          }
          
          # Last resort fallback
          if (-not $version) {
            Write-Warning "Version not found, using fallback."
            $version = "100.25.1.1"
          }
          
          Write-Host "Final determined version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag=v$version-nightly" >> $env:GITHUB_OUTPUT

      - name: Announce Nightly Release on Discord
        if: steps.push_nuget.outputs.packages_published == 'True'
        shell: pwsh
        run: |
          if (-not $env:DISCORD_WEBHOOK_NIGHTLY) {
            Write-Warning "DISCORD_WEBHOOK_NIGHTLY not set - skipping Discord notification"
            exit 0
          }
          
          $payload = @{
            embeds = @(
              @{
                title = "ðŸš€ Krypton Toolkit Nightly Release"
                description = "A new nightly build is now available for bleeding-edge testing!"
                color = 10181046
                fields = @(
                  @{
                    name = "ðŸ“Œ Version"
                    value = "``${{ steps.get_version.outputs.version }}``"
                    inline = $true
                  }
                  @{
                    name = "ðŸ“¦ NuGet Packages"
                    value = "â€¢ [Toolkit](https://www.nuget.org/packages/Krypton.Toolkit.TEST.Nightly)`nâ€¢ [Ribbon](https://www.nuget.org/packages/Krypton.Ribbon.TEST.Nightly)`nâ€¢ [Navigator](https://www.nuget.org/packages/Krypton.Navigator.TEST.Nightly)`nâ€¢ [Workspace](https://www.nuget.org/packages/Krypton.Workspace.TEST.Nightly)`nâ€¢ [Docking](https://www.nuget.org/packages/Krypton.Docking.TEST.Nightly)"
                    inline = $false
                  }
                  @{
                    name = "ðŸŽ¯ Target Frameworks"
                    value = "â€¢ .NET Framework 4.7.2`nâ€¢ .NET Framework 4.8`nâ€¢ .NET Framework 4.8.1`nâ€¢ .NET 8.0`nâ€¢ .NET 9.0`nâ€¢ .NET 10.0"
                    inline = $false
                  }
                )
                footer = @{
                  text = "Released"
                }
                timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
              }
            )
          } | ConvertTo-Json -Depth 10
          
          Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK_NIGHTLY -Method Post -Body $payload -ContentType "application/json"
        env:
          DISCORD_WEBHOOK_NIGHTLY: ${{ secrets.DISCORD_WEBHOOK_NIGHTLY }}
