<Project>
	<Import Project="..\Directory.Build.props" />

	<PropertyGroup>
		<RootFolder>$(MSBuildProjectDirectory)</RootFolder>
		<Configuration>Canary</Configuration>
		<CanaryBuildPath>..\Bin\Canary\Zips</CanaryBuildPath>
		<CanaryZipName>Krypton-Canary</CanaryZipName>
	</PropertyGroup>

	<Target Name="Clean">
		<ItemGroup>
			<Projects Include="..\Source\Krypton Components\Krypton.*\*.csproj" />
		</ItemGroup>
		<MSBuild Projects="@(Projects)" Properties="Configuration=$(Configuration);TFMs=all" Targets="Clean" />
	</Target>

	<Target Name="Restore">
		<ItemGroup>
			<Projects Include="..\Source\Krypton Components\Krypton.*\*.csproj" />
		</ItemGroup>
		<MSBuild Projects="@(Projects)" Properties="Configuration=$(Configuration);TFMs=all" Targets="Restore" />
	</Target>

	<Target Name="Build" DependsOnTargets="Restore">
		<ItemGroup>
			<Projects Include="..\Source\Krypton Components\Krypton.*\*.csproj" />
		</ItemGroup>
		<MSBuild Projects="@(Projects)" Properties="Configuration=$(Configuration);TFMs=all" />
	</Target>

	<Target Name="CleanPackages">
		<ItemGroup>
			<NugetPkgs Include="..\Bin\Packages\Canary\*.nupkg" />
		</ItemGroup>
		<Delete Files="@(NugetPkgs)" />
	</Target>

	<Target Name="PackAll">
		<ItemGroup>
			<Projects Include="..\Source\Krypton Components\Krypton.*\*.csproj" />
		</ItemGroup>
		<ItemGroup>
			<NugetAssets Include="..\Source\Krypton Components\Krypton.*\obj\*.json" />
			<NugetAssets Include="..\Source\Krypton Components\Krypton.*\obj\*.cache" />
			<NugetAssets Include="..\Source\Krypton Components\Krypton.*\obj\*.g.targets" />
			<NugetAssets Include="..\Source\Krypton Components\Krypton.*\obj\*.g.props" />
		</ItemGroup>
		<MSBuild Projects="@(Projects)" Properties="Configuration=$(Configuration);TFMs=all" Targets="Clean" />
		<Delete Files="@(NugetAssets)" />
		<MSBuild Projects="@(Projects)" Properties="Configuration=$(Configuration);TFMs=all" Targets="Restore" />
		<MSBuild Projects="@(Projects)" Properties="Configuration=$(Configuration);TFMs=all" Targets="Pack" />
	</Target>

	<Target Name="Pack" DependsOnTargets="CleanPackages;PackAll" />
	<!--PackLite;-->

	<Target Name="Push">
		<ItemGroup>
			<NugetPkgs Include="..\Bin\Packages\Canary\*.$(LibraryVersion).nupkg" />
		</ItemGroup>
		<Exec Command="nuget.exe push %(NugetPkgs.Identity)" />
	</Target>



	<Target Name="CreateCanaryZip">
		<PropertyGroup>
			<StringDate>$([System.DateTime]::Now.ToString('yyyyMMdd'))</StringDate>
		</PropertyGroup>
		<ItemGroup>
			<DebugApplicationFiles Include="..\Bin\Canary\**\*.*" Exclude="..\Bin\Canary\*vshost.exe*;..\Bin\Canary\**\*.json;..\Bin\Canary\**\*.pdb" />
		</ItemGroup>
		<MakeDir Directories="$(CanaryBuildPath)"/>

		<!-- Using 7-Zip for ZIP creation (compatible with all MSBuild versions) -->
		<Exec Command="7z.exe a -tzip &quot;$(CanaryBuildPath)\$(CanaryZipName)_$(StringDate).zip&quot; &quot;..\Bin\Canary\*&quot; -x!*.json -x!*.pdb"
		      Condition="Exists('C:\Program Files\7-Zip\7z.exe')"
		      WorkingDirectory="$(CanaryBuildPath)" />

		<!-- Fallback: Using PowerShell Compress-Archive if 7-Zip not available -->
		<Exec Command="powershell.exe -Command &quot;Get-ChildItem '..\Bin\Canary\*' -Recurse | Where-Object {$_.Extension -notin '.json','.pdb'} | Compress-Archive -DestinationPath '$(CanaryBuildPath)\$(CanaryZipName)_$(StringDate).zip' -Force&quot;"
		      Condition="!Exists('C:\Program Files\7z.exe')" />
	</Target>

	<Target Name="CreateCanaryTar">
		<PropertyGroup>
			<StringDate>$([System.DateTime]::Now.ToString('yyyyMMdd'))</StringDate>
		</PropertyGroup>
		<ItemGroup>
			<DebugApplicationFiles Include="..\Bin\Canary\**\*.*" Exclude="..\Bin\Canary\*vshost.exe*;..\Bin\Canary\**\*.json;..\Bin\Canary\**\*.pdb" />
		</ItemGroup>
		<MakeDir Directories="$(CanaryBuildPath)"/>

		<!-- Method 1: Using 7-Zip if available (recommended for Windows) -->
		<Exec Command="7z.exe a -ttar &quot;$(CanaryBuildPath)\$(CanaryZipName)_$(StringDate).tar&quot; &quot;..\Bin\Canary\*&quot; -x!*.json -x!*.pdb"
		      Condition="Exists('C:\Program Files\7-Zip\7z.exe')"
		      WorkingDirectory="$(CanaryBuildPath)" />
		<Exec Command="7z.exe a -tgzip &quot;$(CanaryBuildPath)\$(CanaryZipName)_$(StringDate).tar.gz&quot; &quot;$(CanaryBuildPath)\$(CanaryZipName)_$(StringDate).tar&quot;"
		      Condition="Exists('C:\Program Files\7-Zip\7z.exe')"
		      WorkingDirectory="$(CanaryBuildPath)" />
		<Delete Files="$(CanaryBuildPath)\$(CanaryZipName)_$(StringDate).tar"
		        Condition="Exists('C:\Program Files\7-Zip\7z.exe')" />

		<!-- Method 2: Using PowerShell tar command (Windows 10/11) -->
		<Exec Command="powershell.exe -Command tar -czf &quot;$(CanaryBuildPath)\$(CanaryZipName)_$(StringDate)_ps.tar.gz&quot; -C &quot;..\Bin\Canary&quot; . --exclude=*.json --exclude=*.pdb"
		      Condition="Exists('C:\Windows\System32\tar.exe')" />

		<!-- Method 3: Using Git Bash tar if available -->
		<Exec Command="&quot;C:\Program Files\Git\bin\bash.exe&quot; -c &quot;cd ../Bin/Canary &amp;&amp; tar -czf &quot;$(CanaryBuildPath)/$(CanaryZipName)_$(StringDate)_git.tar.gz&quot; * --exclude=*.json --exclude=*.pdb&quot;"
		      Condition="Exists('C:\Program Files\Git\bin\bash.exe')" />
	</Target>

	<Target Name="CreateAllCanaryArchives" DependsOnTargets="CreateCanaryZip;CreateCanaryTar" />
</Project>